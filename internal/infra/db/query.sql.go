// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: query.sql

package db

import (
	"context"
	"time"
)

const createAccount = `-- name: CreateAccount :exec
INSERT INTO accounts 
    (id, owner_name, balance, number, bank_id) VALUES($1,$2,$3,$4,$5)
`

type CreateAccountParams struct {
	ID        string
	OwnerName string
	Balance   int64
	Number    string
	BankID    string
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) error {
	_, err := q.db.ExecContext(ctx, createAccount,
		arg.ID,
		arg.OwnerName,
		arg.Balance,
		arg.Number,
		arg.BankID,
	)
	return err
}

const createBank = `-- name: CreateBank :exec
INSERT INTO banks 
    (id, code, name, created_at)
    VALUES($1,$2,$3,$4)
`

type CreateBankParams struct {
	ID        string
	Code      string
	Name      string
	CreatedAt time.Time
}

func (q *Queries) CreateBank(ctx context.Context, arg CreateBankParams) error {
	_, err := q.db.ExecContext(ctx, createBank,
		arg.ID,
		arg.Code,
		arg.Name,
		arg.CreatedAt,
	)
	return err
}

const createPixKey = `-- name: CreatePixKey :exec
INSERT INTO pix_keys 
    (id, kind, key, status, account_id, created_at)
    VALUES($1,$2,$3,$4,$5,$6)
`

type CreatePixKeyParams struct {
	ID        string
	Kind      string
	Key       string
	Status    string
	AccountID string
	CreatedAt time.Time
}

func (q *Queries) CreatePixKey(ctx context.Context, arg CreatePixKeyParams) error {
	_, err := q.db.ExecContext(ctx, createPixKey,
		arg.ID,
		arg.Kind,
		arg.Key,
		arg.Status,
		arg.AccountID,
		arg.CreatedAt,
	)
	return err
}

const findAccountByID = `-- name: FindAccountByID :one
SELECT id, owner_name, balance, number, bank_id, created_at FROM accounts WHERE id = $1 LIMIT 1
`

func (q *Queries) FindAccountByID(ctx context.Context, id string) (Account, error) {
	row := q.db.QueryRowContext(ctx, findAccountByID, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.OwnerName,
		&i.Balance,
		&i.Number,
		&i.BankID,
		&i.CreatedAt,
	)
	return i, err
}

const findBankByID = `-- name: FindBankByID :one
SELECT id, code, name, created_at FROM banks WHERE id = $1 LIMIT 1
`

func (q *Queries) FindBankByID(ctx context.Context, id string) (Bank, error) {
	row := q.db.QueryRowContext(ctx, findBankByID, id)
	var i Bank
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Name,
		&i.CreatedAt,
	)
	return i, err
}

const findPixKeyByID = `-- name: FindPixKeyByID :one
SELECT id, kind, key, status, account_id, created_at FROM pix_keys WHERE id = $1 LIMIT 1
`

func (q *Queries) FindPixKeyByID(ctx context.Context, id string) (PixKey, error) {
	row := q.db.QueryRowContext(ctx, findPixKeyByID, id)
	var i PixKey
	err := row.Scan(
		&i.ID,
		&i.Kind,
		&i.Key,
		&i.Status,
		&i.AccountID,
		&i.CreatedAt,
	)
	return i, err
}
